* Cargar memoria sobre demanda
** Objetivo de la Práctica 06

Implementar el flujo de vida de un proceso, pero cargando el programa sobre demanda.

** ¿Cómo se carga un programa nuevo en Pintos?

Hemos visto en las prácticas anteriores que la función ~thread_create~, recibe una función ~start_process~ que después de abrir el archivo ejecutable y preparar el ~interruption_frame~. Este ejecuta la función ~load~, encargada de cargar todo el programa en páginas.

La función ~load (const char *file_name, void (**eip) (void), void **esp)~, primero crea una nueva tabla de paginas para el proceso nuevo

#+begin_src c
  /* Allocate and activate page directory. */
  t->pagedir = pagedir_create ();
  if (t->pagedir == NULL) 
    goto done;
  process_activate ();
#+end_src

Después, la función ~load~ verifica que los encabezados (~headers~), del ejecutable cumplen con el formato requerido.

En este caso el campo ~e_phnum~ de ~struct Elf32_Ehdr~ indica el numero de entradas en la tabla de encabezados. Estas entradas representan los segmentos en los cuales el programa esta divido.

Por lo que, para cargar el programa en memoria, es necesario cargar cada segmento usando la función ~load_segment~.

#+begin_src c
  if (!load_segment (file, file_page, (void *) mem_page,
		     read_bytes, zero_bytes, writable))
#+end_src

Los parámetros que recibe esta función son:
- ~struct file *file~: El archivo del cual se va a cargar el segmento.
- ~off_t ofs~: La posición en el archivo a partir del cual se cargara el segmento.
- ~uint8_t *upage~: La dirección por la cual inicia el segmento.
- ~uint32_t read_bytes~: Indica cuantos bytes del archivo debe de leerse y ponerse en las nuevas páginas.
- ~uint32_t zero_bytes~: Indica que cuantos bytes al final del segmento deben de ser escritos con ceros.
- ~bool writable~: Indica si las páginas nuevas debe de tener permiso de escritura o solo lectura.


La función ~load_segment~ va a crear una página nueva hasta que termine de cargar todo el segmento en memoria. Esta página nueva le pertenece al usuario y se crea usando:

#+begin_src c
  /* Get a page of memory. */
  uint8_t *kpage = palloc_get_page (PAL_USER);
#+end_src

Finalmente para cargar cada página se utiliza:

#+begin_src c
  if (file_read (file, kpage, page_read_bytes) != (int) page_read_bytes)
  {
      palloc_free_page (kpage);
      return false; 
    }
  memset (kpage + page_read_bytes, 0, page_zero_bytes);

  /* Add the page to the process's address space. */
  if (!install_page (upage, kpage, writable)) 
  {
    palloc_free_page (kpage);
    return false; 
  }
#+end_src

En donde ~install_page~ se encargar de cargar la nueva página en la tabla de paginación del nuevo proceso.

** ¿Que sucede en Pintos cuando durante la ejecución de un programa ocurre un error?

Supongamos que un programa ~A~, decide hacer una división entre cero. Inmediatamente el procesador lanzara una interrupción de tipo software. Y esta sera manejada por las funciones en ~src/userprog/exection.c~.

Concretamente tenemos 2 tipos de interrupciones:

- ~kill~: Cuando el programa genera una interrupción de la cual no se puede recuperar (por ejemplo, segmentation fault), entonces ~kill~ termina el programa directamente.

- ~page_fault~: La interrupción Page Fault se genera cuando el programa intento acceder a una pagina ilegal (ya sea por que no existe o por que le pertenece a otro programa), y es un caso especial, pues dependiendo de en que modo el CPU este corriendo (kernel o user) cuando se genere esta interrupción es la acción que se de debe de tomar.

** Supplemental Page Table

Cargar la memoria de un proceso sobre demanda, significa que las páginas no se van crear hasta que el proceso intente acceder a una página que todavía no se carga. Esto quiere decir, que la tabla de páginas (Page Table), tendrá sólo algunas páginas del programa.

En caso de que haya un acceso hacia una página que no  existe, tenemos que decidir si el acceso es a un página que hay que cargar en memoria o si el acceso en realidad es hacia una página que no le pertenece al proceso.

Para poder tomar esa decisión necesitamos crear una estructura que vamos a llamar ~Supplemental Page Table~, la cual debe de registrar las páginas de un proceso que todavía no se cargan en memoria.

La definición de dicha tabla se encuentra en ~src/vm/supplemental-pagedir.h~

#+begin_src c
  // La tabla suplementaria de paginación no es mas que un hash map.
  struct supplemental_pagedir
  {
    struct hash table;
  };

  //Las entradas de dicha tabla son
  struct supplemental_pagedir_entry
  {
    void* upage;                          /* Virtual address in swap */
    spde_location_t location;
    bool writable;
    swap_sector_t swap_slot;              /* which index in the swap this page is stored into */
    spde_file_location_t file_location;
    struct hash_elem hash_elem;           /* Hash table element. */
  };

  // Información especifica que nos ayuda a cargar la pagina en la tabla de paginación,
  // tal como lo hace load_segment().
  struct supplemental_pagedir_entry_file_location 
  {
    int32_t fd;
    int offset;
    int read_bytes;
    int zero_bytes;
  };
#+end_src

** ¿Cuál es el flujo de la solución para esta práctica?

1. Cuando un proceso se crea, en la función ~load~ la tabla de páginas suplementaria se debe de crear.

2. En la función ~load_segment~ hay que utilizar la tabla de páginas suplementaria para cargar nuevas páginas a partir del último offset utilizado.

   Los pasos serian entonces los siguientes:
   a. Creamos una nueva entrada en la tabla de paginación suplementaria.
   b. Usando las estructuras en ~src/vm/suplemental-pagedir.h~ guardamos los siguientes datos:
   + ~upage~ : El cual es el identificador único de la pagina.
   + ~ofs~: La posición dentro del archivo de donde se debe de cargar la dirección.
   + ~file_descriptor~: El identificador del archivo abierto asociado al proceso, con este obtenemos el archivo usando la función: ~filesys_syscall_locate_fd~.
   + ~page_read_bytes~: Los bytes a leer de la pagina.
   + ~page_zero_bytes~: El número de ceros a poner en la pagina.
   + ~writable~: Para saber si la pagina es editable o no.

3. Cuando ocurra una interrupción por que la dirección no existe en ninguna página del proceso actual, hay que revisar la tabla suplementaria de páginas para decidir si el acceso es incorrecto, en cuyo caso no se hace nada.
   En otro caso, en donde el acceso es a una dirección que se encuentra en la tabla suplementaria, hay que cargar la página en la tabla de paginación y continuar con la ejecución del programa.

4. Cuando un proceso se destruye, también hay que destruir la tabla suplementaria de páginas.

** ¿Que sucede cuando un programa esta intentando acceder a alguna región de memoria a la cual no tiene acceso?

Actualmente la función ~page_fault()~ inmediatamente imprime información del estado en que se genero la interrupción (esto para permitirle al programador entender los errores que se generan), y termina el programa usando ~kill~.

En esta práctica, sera necesario cambiar la función ~page_fault~, pues en caso de que la interrupción sea ejecutada en modo kernel, entonces necesitamos cargar el resto del programa en Memoria.

** ¿Como es la lógica de la función que implementa la solución antes descrita?

Esta se encuentra en ~src/vm/virtual-memory.h~.

#+begin_src c
  bool
  vm_load_frame_if_present_in_spd (void* fault_addr)
  {
    // 1. Dado que la dirección que falle puede ser cualquiera dentro
    // de una página. Debe de utilizar la función pg_round_down, para
    // obtener la primera dirección en la posible página faltante.

    // 2. Revisen en la tabla suplementaria si la página
    // siguiente estando en la tabla, en caso de no ser así
    // regresen false para indicar que hubo un error.

    // 3. Hay que obtener una nueva página de usuario para el
    // el proceso utilizando, al igual que la implementación original de
    // load_segment, la función palloc_get_page con la misma bandera
    // que load_segment ocupa.

    // 4. Copien la información del programa en la página que
    // que acaban de pedir en el paso anterior.

    // 5. Si la página es de solo escritura, hay que removerla
    // de la tabla de páginas suplementaria.

    // 6. Registren la página que se acaba de crear a la tabla de
    // paginación (pagedir). Para esto utilizen la función
    // pagedir_set_page.

    // 7. Regresen true en caso en caso de que todo haya funcionado
    // correctamente.
  }

#+end_src

* Datos extra de Pintos

** Paginación en Pintos

Una página en Pintos (también conocida como ~virtual page~), es una región continua de 4,096 bytes (4KB).
El formato de una dirección es la siguiente:

#+begin_src c
  31               12 11        0
  +-------------------+-----------+
  |    Page Number    |   Offset  |
  +-------------------+-----------+
	   Direcciones
#+end_src

Esto quiere decir que el ~offset~ es un número entre 2^12 y el número de página es de 2^20.

Las páginas virtuales empiezan por de bajo de ~PHYS_BASE~, es decir, que las direcciones de usuario son menores a ~PHYS_BASE~.

Los threads del kernel tiene acceso a toda la memoria, mientras que los procesos de usuario, sólo tiene acceso a su propia memoria.

** Frames

De igual manera, un frame es similar a un página, pero en este caso, son direcciones físicas.

#+begin_src c
  31               12 11        0
  +-------------------+-----------+
  |    Frame Number   |   Offset  |
  +-------------------+-----------+
	   Dirección física
#+end_src


* Tips

1. Recuerden que las pruebas pasadas deben de funcionar, por lo que el código nuevo que afecte las prácticas anteriores debe de ser ignorado usando ~#ifndef VM~, que es un macro que nos ayuda a solo agregar código si el modulo de memoria virtual ~VM~ esta activado.

2. Las pruebas funcionan sin que le hagan un cambio a la implementación. Deben de seguir pasando después de que terminen su implementación.

3. Resumir un proceso después de que se haya creado una interrupción manejada por ~page_fault()~ es simplemente usar ~return~.

4. Para pedir páginas de usuario utilicen la bandera ~PAL_USER~.
